name: NewBotAI 自动签到

on:
  schedule:
    - cron: '0 0 * * *'  # 每天UTC时间0点运行（北京时间8点）
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  sign:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai  # 设置时区为东八区
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        
      - name: 设置Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          
      - name: 安装依赖
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      
      
      - name: 检查是否存在账号配置
        id: check_secrets
        run: |
          if [ -n "${{ secrets.NEWBOTAI_ACCOUNTS }}" ]; then
            echo "has_accounts=true" >> $GITHUB_OUTPUT
          else
            echo "has_accounts=false" >> $GITHUB_OUTPUT
          fi
      
      - name: 合并环境变量账号到配置文件
        if: steps.check_secrets.outputs.has_accounts == 'true'
        run: |
          python scripts/update_config.py
        env:
          NEWBOTAI_ACCOUNTS: ${{ secrets.NEWBOTAI_ACCOUNTS }}
      
      - name: 运行签到脚本
        if: steps.check_secrets.outputs.has_accounts == 'true'
        run: |
          # 输出当前时间（东八区）
          echo "当前时间：$(date '+%Y-%m-%d %H:%M:%S')"
          # 添加一些环境设置来帮助Chrome运行
          export DISPLAY=:99
          sudo Xvfb :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
          python sign.py
          
      - name: 提示缺少账号配置
        if: steps.check_secrets.outputs.has_accounts == 'false'
        run: |
          echo "未检测到NEWBOTAI_ACCOUNTS环境变量，跳过签到流程"
          echo "请在仓库的Settings -> Secrets and variables -> Actions中添加NEWBOTAI_ACCOUNTS密钥"
      
      - name: Configure Git
        run: |
          git config --local user.email "action@h7ml.cn"
          git config --local user.name "GitHub Action"
          git config --local core.autocrlf false
          git config --local core.safecrlf false
          git config advice.ignoredHook false
    
      - name: Commit and Push
        id: commit
        run: |
          # 检查是否有变更
          if [[ -n $(git status --porcelain) ]]; then
            echo "检测到文件变更，准备提交..."
            
            # 设置错误处理
            set -e
            
            # 获取当前时间戳（东八区）
            TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S CST")
            
            # 准备提交信息
            COMMIT_MSG="feat(token): 自动更新 token 数据
  
            * 更新时间: $TIMESTAMP
            * 触发事件: ${{ github.event_name }}
            
            [skip ci]"
            
            # 提交变更
            echo "提交变更..."
            git add token.md
            git commit -m "$COMMIT_MSG"
            
            # 尝试推送，如果失败则先拉取最新代码
            echo "推送到远程仓库..."
            MAX_RETRIES=3
            RETRY_COUNT=0
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if git push origin main; then
                echo "成功推送到远程仓库"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                  echo "错误：推送失败，已达到最大重试次数"
                  exit 1
                fi
                echo "推送失败，正在进行第 $RETRY_COUNT 次重试..."
                git pull --rebase origin main
              fi
            done
            
            # 获取最新的 commit SHA
            COMMIT_SHA=$(git rev-parse HEAD)
            echo "Commit SHA: $COMMIT_SHA"
            
            # 处理 sign 签到作为提交评论
            md_file="sign.md"
            if [ -f "$md_file" ]; then
              echo "正在添加 sign 签到作为提交评论..."
              
              # 使用通用Markdown处理脚本生成JSON
              python .github/workflows/scripts/process_token.py "$md_file" "签到日志报告" > comment_body.json
              
              # 检查脚本是否成功执行
              if [ $? -eq 0 ]; then
                # 使用生成的JSON文件发送请求
                RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -H "Content-Type: application/json" \
                  --data @comment_body.json \
                  "https://api.github.com/repos/${{ github.repository }}/commits/$COMMIT_SHA/comments")
                
                # 检查响应状态
                HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
                if [ "$HTTP_STATUS" -eq 201 ]; then
                  echo "成功添加提交评论"
                else
                  echo "警告：添加提交评论失败 (HTTP $HTTP_STATUS)"
                  echo "响应内容："
                  echo "$RESPONSE" | sed '$d'
                fi
              else
                echo "警告：生成评论JSON失败"
              fi
              
              # 清理临时文件
              rm -f comment_body.json
            else
              echo "提示：未找到 sign 签到文件"
            fi
            
          else
            echo "没有检测到文件变更，跳过提交"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    