name: Auto Update Tokens

on:
  # schedule:
  #   - cron: '0 0 * * *'  # 每天UTC时间0点运行（北京时间8点）
  workflow_dispatch:  # 允许手动触发

jobs:
  update-tokens:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai  # 设置时区为东八区
    permissions:
      contents: write # 写入仓库内容
      issues: write # 管理 issues
      pull-requests: write # 管理 pull requests
      actions: write # 修改 Actions 工作流
      discussions: write # 写入讨论区
      statuses: write # 更新 commit 状态
      packages: write # 上传、删除包
      pages: write # 发布 GitHub Pages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: main
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
        
    - name: Create config directory
      run: |
        mkdir -p scripts/logs
        
    - name: Run token script
      run: |
        # 输出当前时间（东八区）
        echo "当前时间：$(date '+%Y-%m-%d %H:%M:%S')"
        python get_token.py
        
    - name: Configure Git
      run: |
        git config --local user.email "action@h7ml.cn"
        git config --local user.name "GitHub Action"
        git config --local core.autocrlf false
        git config --local core.safecrlf false
        git config advice.ignoredHook false

    - name: Commit and Push
      id: commit
      run: |
        # 检查是否有变更
        if [[ -n $(git status --porcelain) ]]; then
          echo "检测到文件变更，准备提交..."
          
          # 设置错误处理
          set -e
          
          # 获取当前时间戳（东八区）
          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S CST")
          
          # 准备提交信息
          COMMIT_MSG="feat(token): 自动更新 token 数据

          * 更新时间: $TIMESTAMP
          * 触发事件: ${{ github.event_name }}
          
          [skip ci]"
          
          # 先拉取最新代码，避免冲突
          echo "拉取最新代码..."
          git fetch origin main
          
          # 保存当前更改
          git stash -u || true
          
          # 更新本地main分支
          git merge origin/main || true
          
          # 恢复更改
          git stash pop || true
          
          # 提交变更
          echo "提交变更..."
          git add token.md
          git commit -m "$COMMIT_MSG" || echo "没有新的变更需要提交"
          
          # 尝试推送，如果失败则先拉取最新代码并合并
          echo "推送到远程仓库..."
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if git push origin main; then
              echo "成功推送到远程仓库"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                echo "错误：推送失败，已达到最大重试次数"
                exit 1
              fi
              echo "推送失败，正在进行第 $RETRY_COUNT 次重试..."
              
              # 使用 git pull 而不是 rebase 来处理冲突
              git pull origin main
              # 如果存在冲突，尝试自动解决
              if [[ -n $(git diff --name-only --diff-filter=U) ]]; then
                echo "检测到合并冲突，尝试解决..."
                # 对于 token.md 文件，保留当前更新
                if git diff --name-only --diff-filter=U | grep -q "token.md"; then
                  echo "解决 token.md 冲突..."
                  git checkout --ours token.md
                  git add token.md
                fi
                # 尝试完成合并
                git commit -m "Merge remote changes [skip ci]" || echo "无需合并"
              fi
            fi
          done
          
          # 获取最新的 commit SHA
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "Commit SHA: $COMMIT_SHA"
          
          # 处理 token 报告
          md_file="token.md"
          if [ -f "$md_file" ]; then
            echo "正在添加 token 报告作为提交评论..."
            
            # 使用通用Markdown处理脚本生成JSON
            python .github/workflows/scripts/process_token.py "$md_file" > comment_body.json
            
            # 检查脚本是否成功执行
            if [ $? -eq 0 ]; then
              # 使用生成的JSON文件发送请求
              RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Content-Type: application/json" \
                --data @comment_body.json \
                "https://api.github.com/repos/${{ github.repository }}/commits/$COMMIT_SHA/comments")
              
              # 检查响应状态
              HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
              if [ "$HTTP_STATUS" -eq 201 ]; then
                echo "成功添加提交评论"
              else
                echo "警告：添加提交评论失败 (HTTP $HTTP_STATUS)"
                echo "响应内容："
                echo "$RESPONSE" | sed '$d'
              fi
            else
              echo "警告：生成评论JSON失败"
            fi
            
            # 清理临时文件
            rm -f comment_body.json
          else
            echo "提示：未找到 token 报告文件"
          fi
          
        else
          echo "没有检测到文件变更，跳过提交"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

